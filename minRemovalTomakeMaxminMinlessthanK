package tictactoe

import kotlin.math.min
import kotlin.math.sign

/*Given N integers and K, find the minimum number of elements that should be removed such that Amax-Amin<=K. After the removal of elements, Amax and Amin is considered among the remaining elements.

Examples:

Input : a[] = {1, 3, 4, 9, 10, 11, 12, 17, 20}
          k = 4
Output : 5
Explanation: Remove 1, 3, 4 from beginning
and 17, 20 from the end.

Input : a[] = {1, 5, 6, 2, 8}  K=2
Output : 3
Explanation: There are multiple ways to
remove elements in this case.
One among them is to remove 5, 6, 8.
The other is to remove 1, 2, 5

*/

fun minRemoval(array: Array<Int>, k : Int, start : Int, end : Int) : Int {

    if (start >= end) {
        return 0
    }
    if (array[end] - array[start] <= k) {
        return 0
    }
    return min( 1+ minRemoval(array, k, start +1, end), 1 + minRemoval(array, k, start, end -1))
}

fun dpMinremovalrec(array: Array<Int>, temp : Array<IntArray> ,start: Int, end: Int, k : Int) : Int {

    if (start >= end) {
        return 0
    }
    if (array[end] - array[start] <= k) {
        return 0
    }
    if (temp[start][end] != -1) {
        return temp[start][end]
    }
    temp[start][end] = 1 + min(dpMinremovalrec(array, temp, start+1, end,k),
                        dpMinremovalrec(array, temp, start, end -1, k))
    return temp[start][end]
}

fun dpMinRemoval(array: Array<Int>, start: Int, end: Int,  k : Int) : Int {

    val temp = Array(array.size){IntArray(array.size) {-1} }
    return dpMinremovalrec(array, temp, start, end, k)
}



fun main() {
    //val array = arrayOf(1, 3, 4, 9, 10, 11, 12, 17, 20)
    //val k = 4
    val array = arrayOf(1, 5, 6, 2, 8)
    val k = 2
    array.sort()
    //print(minRemoval(array, k, 0, array.size-1))
    print(dpMinRemoval(array,0,array.size-1, k))
}
