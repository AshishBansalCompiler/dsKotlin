package tictactoe

import kotlin.math.min

/*Given a number n, count minimum steps to minimize it to 1 according to the following criteria:

If n is divisible by 2 then we may reduce n to n/2.
If n is divisible by 3 then you may reduce n to n/3.
Decrement n by 1.
Examples:

Input : n = 10
Output : 3

Input : 6
Output : 2

*/

fun minSteps(n : Int) : Int {
   if (n ==1 ) {
       return 0
   }
    return  min(min(1 + minSteps(n-1), if (n%2 == 0 ) 1 + minSteps(n/2) else Int.MAX_VALUE),
     if ((n%3) == 0) 1 +minSteps(n/3) else Int.MAX_VALUE)
}

fun dpminStepsrecur(n : Int, temp :  IntArray)  :  Int{
    if (n ==1 ) {
        return 0
    }
    if (temp[n] != - 1) {
        return temp[n]
    }
  temp[n] = min(min(1 + dpminStepsrecur(n-1, temp), if (n%2 == 0 ) 1 + dpminStepsrecur(n/2, temp) else Int.MAX_VALUE),
        if ((n%3) == 0) 1 +dpminStepsrecur(n/3, temp) else Int.MAX_VALUE)
    return temp[n]
}

fun dpminsteps(n : Int) : Int {
    val temp = IntArray(n+1){-1}
    return dpminStepsrecur(n, temp)
}

fun main() {
    val n  = 10
    //val n  = 6
    println(minSteps(n))
    println(dpminsteps(n))
}
