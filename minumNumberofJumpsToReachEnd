package tictactoe

/*Given an array of integers where each element represents the max number of steps that can be made forward from that element. Write a function to return the minimum number of jumps to reach the end of the array (starting from the first element). If an element is 0, they cannot move through that element.

Examples:

Input: arr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9}
Output: 3 (1-> 3 -> 8 -> 9)
Explanation: Jump from 1st element
to 2nd element as there is only 1 step,
now there are three options 5, 8 or 9.
If 8 or 9 is chosen then the end node 9
can be reached. So 3 jumps are made.

Input:  arr[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
Output: 10
Explanation: In every step a jump
is needed so the count of jumps is 10.

*/

fun minNumberofJumps(array: Array<Int>, start : Int, end : Int) :  Int {

    if (start == end){
        return 0
    }
    if (array[start] == 0) {
        return Int.MAX_VALUE
    }
    var min = Int.MAX_VALUE

    for (i in start+1 .. end) {
        if (i <= end && i <= start+array[start]) {
            var jumps = minNumberofJumps(array, i, end)
            if (jumps != Int.MAX_VALUE && jumps+1 < min){
                min = jumps + 1
            }
        }
    }
        return min
}

fun dpMinNumberofJumps(array: Array<Int>) :  Int {
    if (array[0] == 0) {
        return Int.MAX_VALUE
    }
    val jump = IntArray(array.size)
    jump[0] = 0

    for (i in 1 until array.size) {
        jump[i] = Int.MAX_VALUE
        for (j in 0 until i) {
            if (i <= j + array[j] && jump[i] > jump[j] + 1 && jump[j] != Int.MAX_VALUE) {
                jump[i] = jump[j]+1
            }
        }
    }

   return jump[array.size-1]
}

fun main() {

    val array = arrayOf(1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9)
    //val array = arrayOf(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
    //println(minNumberofJumps(array, 0, array.size-1))
    println(dpMinNumberofJumps(array))
}
