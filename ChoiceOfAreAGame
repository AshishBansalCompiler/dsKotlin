package tictactoe

import org.omg.CORBA.INTERNAL
import kotlin.math.max

/*Consider a game, in which you have two types of powers,
A and B and there are 3 types of Areas X, Y and Z. Every second you have to
switch between these areas, each area has specific properties by which your
power A and power B increase or decrease. We need to keep choosing areas in
such a way that our survival time is maximized. Survival time ends when any
of the powers, A or B reaches less than 0.
Examples:

Initial value of Power A = 20
Initial value of Power B = 8

Area X (3, 2) : If you step into Area X,
                A increases by 3,
                B increases by 2

Area Y (-5, -10) : If you step into Area Y,
                   A decreases by 5,
                   B decreases by 10

Area Z (-20, 5) : If you step into Area Z,
                  A decreases by 20,
                  B increases by 5

It is possible to choose any area in our first step.
We can survive at max 5 unit of time by following
these choice of areas :
X -> Z -> X -> Y -> X

*/

/*in this solution last will very from 0-4
* when 0 any can choose, else left two can be choosed*/
var xA : Int = 0
var xB : Int = 0
var yA : Int =0
var yB : Int=0
var zA : Int=0
var zB : Int=0


fun choice(powerA : Int, powerB :Int, last : Int) : Int {

    if(powerA <= 0 || powerB <= 0) {
        return 0
    }
    var xVal : Int =0
    var yVal : Int =0
    var zVal : Int =0
    var temp : Int = 0
    if (last == 0) {
         xVal = choice(powerA + xA, powerB + xB, 1)
         yVal = choice(powerA + yA, powerB + yB, 2)
         zVal = choice(powerA + zA, powerB + zB, 3)
        temp =   max(max (xVal, yVal),zVal)
    }
    else if (last == 1 ) {
        yVal = choice(powerA + yA, powerB + yB, 2)
        zVal = choice(powerA + zA, powerB + zB, 3)
        temp =  1 + max(yVal, zVal)
    } else if (last == 2) {
        xVal = choice(powerA + xA, powerB + xB, 1)
        zVal = choice(powerA + zA, powerB + zB, 3)
        temp =  1 + max(xVal, zVal)
    }else if (last == 3) {
        xVal = choice(powerA + xA, powerB + xB, 1)
        yVal = choice(powerA + yA, powerB + yB, 2)
        temp =  1 + max(xVal, yVal)
    }
    return temp
}

fun choiceDP(powerA : Int, powerB :Int, last : Int, list : MutableMap<Pair<Int, Int>, Int>) : Int {
    if (powerA <= 0 || powerB <= 0) {
        return 0
    }
    val pair = Pair(powerA, powerB)
    list.get(pair)?.let { return it }
    var xVal : Int =0
    var yVal : Int =0
    var zVal : Int =0
    var temp : Int = 0
    when(last) {
        1 -> {yVal = choice(powerA + yA, powerB + yB, 2)
             zVal = choice(powerA + zA, powerB + zB, 3)
            temp =  1 + max(yVal, zVal)
        }
        2 -> {
            xVal = choice(powerA + xA, powerB + xB, 1)
            zVal = choice(powerA + zA, powerB + zB, 3)
            temp =  1 + max(xVal, zVal)
        }
        3 -> {
            xVal = choice(powerA + xA, powerB + xB, 1)
            yVal = choice(powerA + yA, powerB + yB, 2)
            temp =  1 + max(xVal, yVal)
        }
    }
    list.put(pair, temp)
    return temp
}

fun main() {
    xA = 3
    xB = 2
    yA = -5
    yB = -10
    zA =  -20
    zB = 5
    val powerA = 20
    val powerB = 8
   // print(choice(20,8, 0))

    // second solution
    if (powerA <= 0 || powerB <= 0) {
        print(0)
    }
    //val list = mutableMapOf<Area, Int>()
    val list = mutableMapOf<Pair<Int, Int>, Int>()
    val xVal = choiceDP(powerA + xA, powerB + xB, 1, list)
    val yVal = choiceDP(powerA + yA, powerB + yB, 2, list)
    val zVal = choiceDP(powerA + zA, powerB + zB, 3, list)
    val temp =   max(max (xVal, yVal),zVal)
    print(temp)
}

data class Area(val powerA :Int, val powerB : Int)
