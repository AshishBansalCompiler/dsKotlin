package tictactoe

/*An array is given, find length of the subarray having maximum sum.

Examples :

Input :  a[] = {1, -2, 1, 1, -2, 1}
Output : Length of the subarray is 2
Explanation: Subarray with consecutive elements
and maximum sum will be {1, 1}. So length is 2

Input : ar[] = { -2, -3, 4, -1, -2, 1, 5, -3 }
Output : Length of the subarray is 5
Explanation: Subarray with consecutive elements
and maximum sum will be {4, -1, -2, 1, 5}.

*/

fun maxSumSubArray(aa : Array<Int>) : Int {

    // kadane algorithm

    var max_so_far = 0
    var max_ending_her = 0
    var start = 0
    var end  =0
    var s =0

    for (i in 0 until aa.size){
        max_ending_her = max_ending_her + aa[i]
        if (max_so_far < max_ending_her) {
            max_so_far = max_ending_her
            start = s
            end = i
        }

        if (max_ending_her < 0) {
            max_ending_her = 0
            s = i+1
        }
    }
        return end-start +1
}

fun main() {

    val array = arrayOf(1, -2, 1, 1, -2, 1)
    print(maxSumSubArray(array))
}
