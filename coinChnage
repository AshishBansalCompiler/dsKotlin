package tictactoe

/*Given a value N, if we want to make change for N cents,
and we have infinite supply of each of S = { S1, S2, .. , Sm}
valued coins, how many ways can we make the change?
The order of coins doesnâ€™t matter.
For example, for N = 4 and S = {1,2,3},
there are four solutions: {1,1,1,1},{1,1,2},{2,2},{1,3}.
So output should be 4. For N = 10 and S = {2, 5, 3, 6},
there are five solutions: {2,2,2,2,2}, {2,2,3,3}, {2,2,6}, {2,3,5} and {5,5}.
So the output should be 5.
*/

/*
what we have
we have array with coins, and one sum
if sum == 0  answer will be 1
if array is empty  answer will be 0
if sum goes less then 0 return 0
* */
fun coinChange(array: IntArray, currSum : Int, length: Int) : Int {

    if (currSum == 0)
        return 1
    if (currSum <  0)
        return 0
    if(length <0 && currSum >0) {
        return 0
    }
    return coinChange(array, currSum-array[length], length) +
            coinChange(array, currSum, length-1)
}

fun dpCoinChange(array: IntArray, currSum : Int, length: Int) {

    val arr = Array(length+1) {IntArray(currSum+1)}
    arr[0][0] =1
    for (i in 1 .. currSum) {
        arr[0][i] = 0
    }
    for (i in 1 .. length) {
        arr[i][0] = 1
    }
    for (i in 1 .. length) {
        for (j in 1 .. currSum) {
           if (array[i-1] <= j ) {
               arr[i][j] = arr[i-1][j] + arr[i][j-array[i-1]]
           } else {
               arr[i][j] = arr[i-1][j]
           }
        }
    }

    println(arr[length][currSum])
}

fun main() {
    val aa = IntArray(3)
    aa[0] = 1
    aa[1] = 2
    aa[2] = 3

    //print(coinChange( aa, 10, aa.size-1))
    dpCoinChange(aa,4, aa.size)

}
