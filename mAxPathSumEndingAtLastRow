package tictactoe

import kotlin.math.max

/*Given a matrix of integers where every element represents weight of the cell. Find the path having the maximum weight in matrix [N X N]. Path Traversal Rules are:

It should begin from top left element.
The path can end at any element of last row.
We can move to following two cells from a cell (i, j).
Down Move : (i+1, j)
Diagonal Move : (i+1, j+1)
Examples:

Input : N = 5
        mat[5][5] = {{ 4, 2 ,3 ,4 ,1 },
                     { 2 , 9 ,1 ,10 ,5 },
                     {15, 1 ,3 , 0 ,20 },
                     {16 ,92, 41, 44 ,1},
                     {8, 142, 6, 4, 8} };
Output : 255
Path with max weight : 4 + 2 +15 + 92 + 142 = 255

*/

fun maxSumEndingAtLastRow(array : Array<Array<Int>>) : Int {
    val rows = array.size
    val col = array[0].size

    val temp = Array(rows){IntArray(col)}
    for (i in 0 until col) {
        temp[0][i] = array[0][i]
    }

    for (i in 1 until rows) {
        temp[i][0] = temp[i-1][0] + array[i][0]
    }

    for (i in 1 until rows) {
        for (j in 1 until col) {
            temp[i][j] = max(temp[i-1][j], temp[i-1][j-1]) + array[i][j]
        }
    }

    var max = temp[rows-1][0]
    for (i in 1 until rows) {
        max = max(max, temp[rows-1][i])
    }
    return max
}

fun main() {

    val array = arrayOf(arrayOf(4, 2 ,3 ,4 ,1),
                arrayOf(2 , 9 ,1 ,10 ,5 ),
                arrayOf(15, 1 ,3 , 0 ,20),
                arrayOf(16 ,92, 41, 44 ,1),
                arrayOf(8, 142, 6, 4, 8))

    println(maxSumEndingAtLastRow(array))
}
