package tictactoe

import kotlin.math.max

/*Given an array of n positive integers, write a program to find the
maximum sum of increasing subsequence from prefix till ith index and also including a
given kth element which is after i, i.e., k > i .
Examples :


Input: arr[] = {1, 101, 2, 3, 100, 4, 5} i-th index = 4 (Element at 4th index is 100)
K-th index = 6 (Element at 6th index is 5.)
Output: 11
Explanation:
So we need to calculate the maximum sum of subsequence (1 101 2 3 100 5) such that 5
is necessarily included in the subsequence, so answer is 11 by subsequence (1 2 3 5).

Input: arr[] = {1, 101, 2, 3, 100, 4, 5} i-th index = 2 (Element at 2nd index is 2) K-th index = 5
(Element at 5th index is 4.)
Output: 7
Explanation:
So we need to calculate the maximum sum of subsequence (1 101 2 4) such that 4
is necessarily included in the subsequence, so answer is 7 by subsequence (1 2 4). */

class MaximumSumIncreasingAndPrefix(val aa : Array<Int>, val start : Int, val k :Int) {

    fun calculate() {
        // fist get the array from 0th index to
        val tt = IntArray(start+1)
        tt[0] = aa[0]
        for (i in 1 .. start) {
           // if (i <= start +1)
            tt[i] = aa[i]
            for (j in 0 until i) {
                if (aa[i] > aa[j] && tt[i] < tt[j] + aa[i] && aa[i] <= aa[k]) {
                    tt[i] = tt[j] + aa[i]
                }
                if (aa[i] > aa[k]) {
                    tt[i] = 0
                }
            }
        }
        var m = tt[0]
        for (i in 0 .. start) {
            m = max(m, tt[i])
        }
        print(m + aa[k])
    }

}

fun main() {
    val aa = arrayOf(1, 101, 2, 3, 100, 4, 5)
    val i = 2 //4
    val k = 5 //6
    val maximumSumIncreasingAndPrefix = MaximumSumIncreasingAndPrefix(aa,i,k)
    maximumSumIncreasingAndPrefix.calculate()
}
