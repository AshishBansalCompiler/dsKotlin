package tictactoe

/*Given a square matrix of size N*N, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells which starts from the top left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.
Examples:

Input : Matrix = [1, 2, 3
                  4, 5, 6
                  7, 8, 9]
Output : 5.8
Path with maximum average is, 1 -> 4 -> 7 -> 8 -> 9
Sum of the path is 29 and average is 29/5 = 5.8

One interesting observation is, the only allowed moves are down and right,
we need N-1 down moves and N-1 right moves to reach the destination (bottom rightmost).
So any path from top left corner to bottom right corner requires 2N â€“ 1 cells.
In average value, the denominator is fixed and we need to just maximize numerator.
Therefore we basically need to find the maximum sum path.
Calculating maximum sum of path is a classic dynamic programming problem
*/

import kotlin.math.max

fun pathMaximumSumAverageValue(aa : Array<IntArray>, i : Int , j : Int) : Int {

    if (i < 0 || j < 0) {
        return 0
    }
    var p = 0
    if (i >= 0) {
        p = aa[i][j] + pathMaximumSumAverageValue(aa, i-1, j)
    }
    var q = 0
    if (j >= 0) {
        q = aa[i][j] + pathMaximumSumAverageValue(aa, i, j-1)
    }
    return max(p,q)
}

fun dpMaximumSuminMatrix(aa : Array<IntArray>) {
    val array = Array(aa.size){IntArray(aa.size)}
    array[0][0] = aa[0][0]
    val n = aa.size
    for (i in 1 until n) {
        array[0][i] = array[0][i-1] + aa[0][i]
        array[i][0] = array[i-1][0] + aa[i][0]
    }
    for (i in 1 until n) {
        for (j in 1 until n) {
            array[i][j] = aa[i][j]+ max(array[i-1][j], array[i][j-1])
        }
    }
    val p = array[n-1][n-1]
    val res = p.toDouble()/(2*n-1)
    print(res)
}

fun main() {
    val n = 3
    //val aa = arrayOf(intArrayOf(1,2,3), intArrayOf(4,5,6), intArrayOf(7,8,9))
   val aa = arrayOf(intArrayOf(1,2,3), intArrayOf(6,5,4), intArrayOf(7,3,9))
    //val res = pathMaximumSumAverageValue(aa, n-1, n-1)
    //val double = (res.toDouble()/(2*n-1))
    //print(double)

    // now dynamic solution
    dpMaximumSuminMatrix(aa)
}
